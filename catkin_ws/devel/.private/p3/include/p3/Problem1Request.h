// Generated by gencpp from file p3/Problem1Request.msg
// DO NOT EDIT!


#ifndef P3_MESSAGE_PROBLEM1REQUEST_H
#define P3_MESSAGE_PROBLEM1REQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <p3/JointAngles.h>

namespace p3
{
template <class ContainerAllocator>
struct Problem1Request_
{
  typedef Problem1Request_<ContainerAllocator> Type;

  Problem1Request_()
    : angles()  {
    }
  Problem1Request_(const ContainerAllocator& _alloc)
    : angles(_alloc)  {
  (void)_alloc;
    }



   typedef  ::p3::JointAngles_<ContainerAllocator>  _angles_type;
  _angles_type angles;





  typedef boost::shared_ptr< ::p3::Problem1Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::p3::Problem1Request_<ContainerAllocator> const> ConstPtr;

}; // struct Problem1Request_

typedef ::p3::Problem1Request_<std::allocator<void> > Problem1Request;

typedef boost::shared_ptr< ::p3::Problem1Request > Problem1RequestPtr;
typedef boost::shared_ptr< ::p3::Problem1Request const> Problem1RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::p3::Problem1Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::p3::Problem1Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace p3

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'p3': ['/home/cs4750/catkin_ws/src/p3/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::p3::Problem1Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::p3::Problem1Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p3::Problem1Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p3::Problem1Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p3::Problem1Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p3::Problem1Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::p3::Problem1Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9bdd08346a6a9968cc9c423de3cdfb8";
  }

  static const char* value(const ::p3::Problem1Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9bdd08346a6a996ULL;
  static const uint64_t static_value2 = 0x8cc9c423de3cdfb8ULL;
};

template<class ContainerAllocator>
struct DataType< ::p3::Problem1Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "p3/Problem1Request";
  }

  static const char* value(const ::p3::Problem1Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::p3::Problem1Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "JointAngles angles\n\
\n\
================================================================================\n\
MSG: p3/JointAngles\n\
float64[5] angles\n\
";
  }

  static const char* value(const ::p3::Problem1Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::p3::Problem1Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Problem1Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::p3::Problem1Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::p3::Problem1Request_<ContainerAllocator>& v)
  {
    s << indent << "angles: ";
    s << std::endl;
    Printer< ::p3::JointAngles_<ContainerAllocator> >::stream(s, indent + "  ", v.angles);
  }
};

} // namespace message_operations
} // namespace ros

#endif // P3_MESSAGE_PROBLEM1REQUEST_H
