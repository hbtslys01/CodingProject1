// Generated by gencpp from file p4/ClosestPointPathResponse.msg
// DO NOT EDIT!


#ifndef P4_MESSAGE_CLOSESTPOINTPATHRESPONSE_H
#define P4_MESSAGE_CLOSESTPOINTPATHRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace p4
{
template <class ContainerAllocator>
struct ClosestPointPathResponse_
{
  typedef ClosestPointPathResponse_<ContainerAllocator> Type;

  ClosestPointPathResponse_()
    : closest_point()
    , path_position()
    , dist_to_path()  {
    }
  ClosestPointPathResponse_(const ContainerAllocator& _alloc)
    : closest_point(_alloc)
    , path_position(_alloc)
    , dist_to_path(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _closest_point_type;
  _closest_point_type closest_point;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _path_position_type;
  _path_position_type path_position;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _dist_to_path_type;
  _dist_to_path_type dist_to_path;





  typedef boost::shared_ptr< ::p4::ClosestPointPathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::p4::ClosestPointPathResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ClosestPointPathResponse_

typedef ::p4::ClosestPointPathResponse_<std::allocator<void> > ClosestPointPathResponse;

typedef boost::shared_ptr< ::p4::ClosestPointPathResponse > ClosestPointPathResponsePtr;
typedef boost::shared_ptr< ::p4::ClosestPointPathResponse const> ClosestPointPathResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::p4::ClosestPointPathResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::p4::ClosestPointPathResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace p4

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'p4': ['/home/cs4750/catkin_ws/src/p4/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::p4::ClosestPointPathResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::p4::ClosestPointPathResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p4::ClosestPointPathResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p4::ClosestPointPathResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p4::ClosestPointPathResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p4::ClosestPointPathResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::p4::ClosestPointPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ebc6dc89852fd036310e5b46c218952";
  }

  static const char* value(const ::p4::ClosestPointPathResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ebc6dc89852fd03ULL;
  static const uint64_t static_value2 = 0x6310e5b46c218952ULL;
};

template<class ContainerAllocator>
struct DataType< ::p4::ClosestPointPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "p4/ClosestPointPathResponse";
  }

  static const char* value(const ::p4::ClosestPointPathResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::p4::ClosestPointPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point closest_point\n\
std_msgs/Float32 path_position\n\
std_msgs/Float32 dist_to_path\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
";
  }

  static const char* value(const ::p4::ClosestPointPathResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::p4::ClosestPointPathResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.closest_point);
      stream.next(m.path_position);
      stream.next(m.dist_to_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClosestPointPathResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::p4::ClosestPointPathResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::p4::ClosestPointPathResponse_<ContainerAllocator>& v)
  {
    s << indent << "closest_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.closest_point);
    s << indent << "path_position: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.path_position);
    s << indent << "dist_to_path: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.dist_to_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // P4_MESSAGE_CLOSESTPOINTPATHRESPONSE_H
