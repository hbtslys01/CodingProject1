// Generated by gencpp from file p5/ActionOption.msg
// DO NOT EDIT!


#ifndef P5_MESSAGE_ACTIONOPTION_H
#define P5_MESSAGE_ACTIONOPTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <p5/Action.h>
#include <p5/ActionEffect.h>

namespace p5
{
template <class ContainerAllocator>
struct ActionOption_
{
  typedef ActionOption_<ContainerAllocator> Type;

  ActionOption_()
    : action()
    , effects()  {
    }
  ActionOption_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , effects(_alloc)  {
  (void)_alloc;
    }



   typedef  ::p5::Action_<ContainerAllocator>  _action_type;
  _action_type action;

   typedef std::vector< ::p5::ActionEffect_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::p5::ActionEffect_<ContainerAllocator> >::other >  _effects_type;
  _effects_type effects;





  typedef boost::shared_ptr< ::p5::ActionOption_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::p5::ActionOption_<ContainerAllocator> const> ConstPtr;

}; // struct ActionOption_

typedef ::p5::ActionOption_<std::allocator<void> > ActionOption;

typedef boost::shared_ptr< ::p5::ActionOption > ActionOptionPtr;
typedef boost::shared_ptr< ::p5::ActionOption const> ActionOptionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::p5::ActionOption_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::p5::ActionOption_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace p5

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'p5': ['/home/cs4750/catkin_ws/src/p5/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::p5::ActionOption_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::p5::ActionOption_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p5::ActionOption_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p5::ActionOption_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p5::ActionOption_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p5::ActionOption_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::p5::ActionOption_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b85ff8a461d87e8dfc582b2fca18bd96";
  }

  static const char* value(const ::p5::ActionOption_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb85ff8a461d87e8dULL;
  static const uint64_t static_value2 = 0xfc582b2fca18bd96ULL;
};

template<class ContainerAllocator>
struct DataType< ::p5::ActionOption_<ContainerAllocator> >
{
  static const char* value()
  {
    return "p5/ActionOption";
  }

  static const char* value(const ::p5::ActionOption_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::p5::ActionOption_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Action action		# The action can cause any one of the effects\n\
ActionEffect[] effects\n\
\n\
================================================================================\n\
MSG: p5/Action\n\
int8 STOP = -1\n\
int8 SENSE = 0\n\
int8 MOVE1 = 1\n\
int8 MOVE2 = 2\n\
int8 MOVE3 = 3\n\
int8 MOVE4 = 4\n\
int8 MOVE5 = 5\n\
\n\
int8 name\n\
\n\
================================================================================\n\
MSG: p5/ActionEffect\n\
State next_state	# the state this action is transitioning to\n\
float64 probability	# the probability of that transition occurring in this state\n\
float64 reward		# the reward resulting from this transition\n\
\n\
================================================================================\n\
MSG: p5/State\n\
int8 location\n\
float64[5] distribution\n\
";
  }

  static const char* value(const ::p5::ActionOption_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::p5::ActionOption_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.effects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionOption_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::p5::ActionOption_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::p5::ActionOption_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    s << std::endl;
    Printer< ::p5::Action_<ContainerAllocator> >::stream(s, indent + "  ", v.action);
    s << indent << "effects[]" << std::endl;
    for (size_t i = 0; i < v.effects.size(); ++i)
    {
      s << indent << "  effects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::p5::ActionEffect_<ContainerAllocator> >::stream(s, indent + "    ", v.effects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // P5_MESSAGE_ACTIONOPTION_H
