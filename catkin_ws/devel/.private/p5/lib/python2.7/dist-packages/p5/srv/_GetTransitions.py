# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from p5/GetTransitionsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import p5.msg

class GetTransitionsRequest(genpy.Message):
  _md5sum = "cf0c3a8c031d9785207b75a4d2774f5a"
  _type = "p5/GetTransitionsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """State state

================================================================================
MSG: p5/State
int8 location
float64[5] distribution
"""
  __slots__ = ['state']
  _slot_types = ['p5/State']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTransitionsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = p5.msg.State()
    else:
      self.state = p5.msg.State()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_b().pack(self.state.location))
      buff.write(_get_struct_5d().pack(*self.state.distribution))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.state is None:
        self.state = p5.msg.State()
      end = 0
      start = end
      end += 1
      (self.state.location,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 40
      self.state.distribution = _get_struct_5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_b().pack(self.state.location))
      buff.write(self.state.distribution.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.state is None:
        self.state = p5.msg.State()
      end = 0
      start = end
      end += 1
      (self.state.location,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 40
      self.state.distribution = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=5)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from p5/GetTransitionsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import p5.msg

class GetTransitionsResponse(genpy.Message):
  _md5sum = "6675e6895de9e0b5515afd521b48ed56"
  _type = "p5/GetTransitionsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ActionOption[] actions


================================================================================
MSG: p5/ActionOption
Action action		# The action can cause any one of the effects
ActionEffect[] effects

================================================================================
MSG: p5/Action
int8 STOP = -1
int8 SENSE = 0
int8 MOVE1 = 1
int8 MOVE2 = 2
int8 MOVE3 = 3
int8 MOVE4 = 4
int8 MOVE5 = 5

int8 name

================================================================================
MSG: p5/ActionEffect
State next_state	# the state this action is transitioning to
float64 probability	# the probability of that transition occurring in this state
float64 reward		# the reward resulting from this transition

================================================================================
MSG: p5/State
int8 location
float64[5] distribution
"""
  __slots__ = ['actions']
  _slot_types = ['p5/ActionOption[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       actions

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTransitionsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.actions is None:
        self.actions = []
    else:
      self.actions = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.actions)
      buff.write(_struct_I.pack(length))
      for val1 in self.actions:
        _v1 = val1.action
        buff.write(_get_struct_b().pack(_v1.name))
        length = len(val1.effects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.effects:
          _v2 = val2.next_state
          buff.write(_get_struct_b().pack(_v2.location))
          buff.write(_get_struct_5d().pack(*_v2.distribution))
          _x = val2
          buff.write(_get_struct_2d().pack(_x.probability, _x.reward))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.actions is None:
        self.actions = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actions = []
      for i in range(0, length):
        val1 = p5.msg.ActionOption()
        _v3 = val1.action
        start = end
        end += 1
        (_v3.name,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.effects = []
        for i in range(0, length):
          val2 = p5.msg.ActionEffect()
          _v4 = val2.next_state
          start = end
          end += 1
          (_v4.location,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 40
          _v4.distribution = _get_struct_5d().unpack(str[start:end])
          _x = val2
          start = end
          end += 16
          (_x.probability, _x.reward,) = _get_struct_2d().unpack(str[start:end])
          val1.effects.append(val2)
        self.actions.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.actions)
      buff.write(_struct_I.pack(length))
      for val1 in self.actions:
        _v5 = val1.action
        buff.write(_get_struct_b().pack(_v5.name))
        length = len(val1.effects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.effects:
          _v6 = val2.next_state
          buff.write(_get_struct_b().pack(_v6.location))
          buff.write(_v6.distribution.tostring())
          _x = val2
          buff.write(_get_struct_2d().pack(_x.probability, _x.reward))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.actions is None:
        self.actions = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actions = []
      for i in range(0, length):
        val1 = p5.msg.ActionOption()
        _v7 = val1.action
        start = end
        end += 1
        (_v7.name,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.effects = []
        for i in range(0, length):
          val2 = p5.msg.ActionEffect()
          _v8 = val2.next_state
          start = end
          end += 1
          (_v8.location,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 40
          _v8.distribution = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=5)
          _x = val2
          start = end
          end += 16
          (_x.probability, _x.reward,) = _get_struct_2d().unpack(str[start:end])
          val1.effects.append(val2)
        self.actions.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
class GetTransitions(object):
  _type          = 'p5/GetTransitions'
  _md5sum = '1fab3630f0a783dcf6c5e57c78db46b6'
  _request_class  = GetTransitionsRequest
  _response_class = GetTransitionsResponse
