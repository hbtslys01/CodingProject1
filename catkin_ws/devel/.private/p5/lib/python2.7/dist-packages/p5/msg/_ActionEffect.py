# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from p5/ActionEffect.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import p5.msg

class ActionEffect(genpy.Message):
  _md5sum = "389fa51769ae72e234321be7110c4f63"
  _type = "p5/ActionEffect"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """State next_state	# the state this action is transitioning to
float64 probability	# the probability of that transition occurring in this state
float64 reward		# the reward resulting from this transition

================================================================================
MSG: p5/State
int8 location
float64[5] distribution
"""
  __slots__ = ['next_state','probability','reward']
  _slot_types = ['p5/State','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       next_state,probability,reward

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActionEffect, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.next_state is None:
        self.next_state = p5.msg.State()
      if self.probability is None:
        self.probability = 0.
      if self.reward is None:
        self.reward = 0.
    else:
      self.next_state = p5.msg.State()
      self.probability = 0.
      self.reward = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_b().pack(self.next_state.location))
      buff.write(_get_struct_5d().pack(*self.next_state.distribution))
      _x = self
      buff.write(_get_struct_2d().pack(_x.probability, _x.reward))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.next_state is None:
        self.next_state = p5.msg.State()
      end = 0
      start = end
      end += 1
      (self.next_state.location,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 40
      self.next_state.distribution = _get_struct_5d().unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.probability, _x.reward,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_b().pack(self.next_state.location))
      buff.write(self.next_state.distribution.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.probability, _x.reward))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.next_state is None:
        self.next_state = p5.msg.State()
      end = 0
      start = end
      end += 1
      (self.next_state.location,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 40
      self.next_state.distribution = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=5)
      _x = self
      start = end
      end += 16
      (_x.probability, _x.reward,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
